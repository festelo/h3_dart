// Mocks generated by Mockito 5.4.6 from annotations
// in geojson2h3/test/geojson2h3_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:h3_common/h3_common.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeoCoord_0 extends _i1.SmartFake implements _i2.GeoCoord {
  _FakeGeoCoord_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordIJ_1 extends _i1.SmartFake implements _i2.CoordIJ {
  _FakeCoordIJ_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [H3].
///
/// See the documentation for Mockito's code generation for more information.
class MockH3 extends _i1.Mock implements _i2.H3 {
  MockH3() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isValidCell(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #isValidCell,
          [h3Index],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isPentagon(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #isPentagon,
          [h3Index],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isResClassIII(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #isResClassIII,
          [h3Index],
        ),
        returnValue: false,
      ) as bool);

  @override
  int getBaseCellNumber(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #getBaseCellNumber,
          [h3Index],
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int> getIcosahedronFaces(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #getIcosahedronFaces,
          [h3Index],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  int getResolution(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #getResolution,
          [h3Index],
        ),
        returnValue: 0,
      ) as int);

  @override
  BigInt geoToCell(
    _i2.GeoCoord? geoCoord,
    int? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #geoToCell,
          [
            geoCoord,
            resolution,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #geoToCell,
            [
              geoCoord,
              resolution,
            ],
          ),
        ),
      ) as BigInt);

  @override
  _i2.GeoCoord cellToGeo(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #cellToGeo,
          [h3Index],
        ),
        returnValue: _FakeGeoCoord_0(
          this,
          Invocation.method(
            #cellToGeo,
            [h3Index],
          ),
        ),
      ) as _i2.GeoCoord);

  @override
  List<_i2.GeoCoord> cellToBoundary(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #cellToBoundary,
          [h3Index],
        ),
        returnValue: <_i2.GeoCoord>[],
      ) as List<_i2.GeoCoord>);

  @override
  BigInt cellToParent(
    BigInt? h3Index,
    int? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToParent,
          [
            h3Index,
            resolution,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #cellToParent,
            [
              h3Index,
              resolution,
            ],
          ),
        ),
      ) as BigInt);

  @override
  List<BigInt> cellToChildren(
    BigInt? h3Index,
    int? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToChildren,
          [
            h3Index,
            resolution,
          ],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  int cellToChildrenSize(
    BigInt? h3Index,
    int? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToChildrenSize,
          [
            h3Index,
            resolution,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  BigInt cellToCenterChild(
    BigInt? h3Index,
    int? resolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToCenterChild,
          [
            h3Index,
            resolution,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #cellToCenterChild,
            [
              h3Index,
              resolution,
            ],
          ),
        ),
      ) as BigInt);

  @override
  int cellToChildPos(
    BigInt? h3Index,
    int? parentResolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToChildPos,
          [
            h3Index,
            parentResolution,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  BigInt childPosToCell(
    int? childPosition,
    BigInt? h3Index,
    int? childResolution,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #childPosToCell,
          [
            childPosition,
            h3Index,
            childResolution,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #childPosToCell,
            [
              childPosition,
              h3Index,
              childResolution,
            ],
          ),
        ),
      ) as BigInt);

  @override
  List<BigInt> gridDisk(
    BigInt? h3Index,
    int? ringSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gridDisk,
          [
            h3Index,
            ringSize,
          ],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<List<BigInt>> gridDiskDistances(
    BigInt? h3Index,
    int? ringSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gridDiskDistances,
          [
            h3Index,
            ringSize,
          ],
        ),
        returnValue: <List<BigInt>>[],
      ) as List<List<BigInt>>);

  @override
  List<BigInt> gridRingUnsafe(
    BigInt? h3Index,
    int? ringSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gridRingUnsafe,
          [
            h3Index,
            ringSize,
          ],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<BigInt> polygonToCells({
    required List<_i2.GeoCoord>? perimeter,
    required int? resolution,
    List<List<_i2.GeoCoord>>? holes = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #polygonToCells,
          [],
          {
            #perimeter: perimeter,
            #resolution: resolution,
            #holes: holes,
          },
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<BigInt> polygonToCellsExperimental({
    required List<_i2.GeoCoord>? perimeter,
    required int? resolution,
    List<List<_i2.GeoCoord>>? holes = const [],
    _i2.PolygonToCellFlags? flag = _i2.PolygonToCellFlags.containmentCenter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #polygonToCellsExperimental,
          [],
          {
            #perimeter: perimeter,
            #resolution: resolution,
            #holes: holes,
            #flag: flag,
          },
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<List<List<_i2.GeoCoord>>> cellsToMultiPolygon(List<BigInt>? h3Indexes) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellsToMultiPolygon,
          [h3Indexes],
        ),
        returnValue: <List<List<_i2.GeoCoord>>>[],
      ) as List<List<List<_i2.GeoCoord>>>);

  @override
  List<BigInt> compactCells(List<BigInt>? h3Set) => (super.noSuchMethod(
        Invocation.method(
          #compactCells,
          [h3Set],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<BigInt> uncompactCells(
    List<BigInt>? h3Set, {
    required int? resolution,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uncompactCells,
          [h3Set],
          {#resolution: resolution},
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  bool areNeighborCells(
    BigInt? origin,
    BigInt? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #areNeighborCells,
          [
            origin,
            destination,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  BigInt cellsToDirectedEdge(
    BigInt? origin,
    BigInt? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellsToDirectedEdge,
          [
            origin,
            destination,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #cellsToDirectedEdge,
            [
              origin,
              destination,
            ],
          ),
        ),
      ) as BigInt);

  @override
  BigInt getDirectedEdgeOrigin(BigInt? edgeIndex) => (super.noSuchMethod(
        Invocation.method(
          #getDirectedEdgeOrigin,
          [edgeIndex],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #getDirectedEdgeOrigin,
            [edgeIndex],
          ),
        ),
      ) as BigInt);

  @override
  BigInt getDirectedEdgeDestination(BigInt? edgeIndex) => (super.noSuchMethod(
        Invocation.method(
          #getDirectedEdgeDestination,
          [edgeIndex],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #getDirectedEdgeDestination,
            [edgeIndex],
          ),
        ),
      ) as BigInt);

  @override
  bool isValidDirectedEdge(BigInt? edgeIndex) => (super.noSuchMethod(
        Invocation.method(
          #isValidDirectedEdge,
          [edgeIndex],
        ),
        returnValue: false,
      ) as bool);

  @override
  ({BigInt destination, BigInt origin}) directedEdgeToCells(
          BigInt? edgeIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #directedEdgeToCells,
          [edgeIndex],
        ),
        returnValue: (
          destination: _i3.dummyValue<BigInt>(
            this,
            Invocation.method(
              #directedEdgeToCells,
              [edgeIndex],
            ),
          ),
          origin: _i3.dummyValue<BigInt>(
            this,
            Invocation.method(
              #directedEdgeToCells,
              [edgeIndex],
            ),
          )
        ),
      ) as ({BigInt destination, BigInt origin}));

  @override
  List<BigInt> originToDirectedEdges(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #originToDirectedEdges,
          [h3Index],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<_i2.GeoCoord> directedEdgeToBoundary(BigInt? edgeIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #directedEdgeToBoundary,
          [edgeIndex],
        ),
        returnValue: <_i2.GeoCoord>[],
      ) as List<_i2.GeoCoord>);

  @override
  int gridDistance(
    BigInt? origin,
    BigInt? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gridDistance,
          [
            origin,
            destination,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  List<BigInt> gridPathCells(
    BigInt? origin,
    BigInt? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gridPathCells,
          [
            origin,
            destination,
          ],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  _i2.CoordIJ cellToLocalIj(
    BigInt? origin,
    BigInt? destination,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToLocalIj,
          [
            origin,
            destination,
          ],
        ),
        returnValue: _FakeCoordIJ_1(
          this,
          Invocation.method(
            #cellToLocalIj,
            [
              origin,
              destination,
            ],
          ),
        ),
      ) as _i2.CoordIJ);

  @override
  BigInt localIjToCell(
    BigInt? origin,
    _i2.CoordIJ? coordinates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #localIjToCell,
          [
            origin,
            coordinates,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #localIjToCell,
            [
              origin,
              coordinates,
            ],
          ),
        ),
      ) as BigInt);

  @override
  double greatCircleDistance(
    _i2.GeoCoord? a,
    _i2.GeoCoord? b,
    _i2.H3Units? unit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #greatCircleDistance,
          [
            a,
            b,
            unit,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double cellArea(
    BigInt? h3Index,
    _i2.H3Units? unit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellArea,
          [
            h3Index,
            unit,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double edgeLength(
    BigInt? edge,
    _i2.H3Units? unit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #edgeLength,
          [
            edge,
            unit,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double getHexagonAreaAvg(
    int? resolution,
    _i2.H3MetricUnits? unit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHexagonAreaAvg,
          [
            resolution,
            unit,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double getHexagonEdgeLengthAvg(
    int? resolution,
    _i2.H3MetricUnits? unit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHexagonEdgeLengthAvg,
          [
            resolution,
            unit,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  BigInt cellToVertex(
    BigInt? h3Index,
    int? vertexNum,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cellToVertex,
          [
            h3Index,
            vertexNum,
          ],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #cellToVertex,
            [
              h3Index,
              vertexNum,
            ],
          ),
        ),
      ) as BigInt);

  @override
  List<BigInt> cellToVertexes(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #cellToVertexes,
          [h3Index],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  _i2.GeoCoord vertexToGeo(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #vertexToGeo,
          [h3Index],
        ),
        returnValue: _FakeGeoCoord_0(
          this,
          Invocation.method(
            #vertexToGeo,
            [h3Index],
          ),
        ),
      ) as _i2.GeoCoord);

  @override
  bool isValidVertex(BigInt? h3Index) => (super.noSuchMethod(
        Invocation.method(
          #isValidVertex,
          [h3Index],
        ),
        returnValue: false,
      ) as bool);

  @override
  BigInt getNumCells(int? resolution) => (super.noSuchMethod(
        Invocation.method(
          #getNumCells,
          [resolution],
        ),
        returnValue: _i3.dummyValue<BigInt>(
          this,
          Invocation.method(
            #getNumCells,
            [resolution],
          ),
        ),
      ) as BigInt);

  @override
  List<BigInt> getRes0Cells() => (super.noSuchMethod(
        Invocation.method(
          #getRes0Cells,
          [],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  List<BigInt> getPentagons(int? resolution) => (super.noSuchMethod(
        Invocation.method(
          #getPentagons,
          [resolution],
        ),
        returnValue: <BigInt>[],
      ) as List<BigInt>);

  @override
  double degsToRads(double? deg) => (super.noSuchMethod(
        Invocation.method(
          #degsToRads,
          [deg],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double radsToDegs(double? rad) => (super.noSuchMethod(
        Invocation.method(
          #radsToDegs,
          [rad],
        ),
        returnValue: 0.0,
      ) as double);
}
