// Mocks generated by Mockito 5.2.0 from annotations
// in geojson2h3/test/geojson2h3_test.dart.
// Do not manually edit this file.

import 'package:h3_common/h3_common.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBigInt_0 extends _i1.Fake implements BigInt {}

class _FakeGeoCoord_1 extends _i1.Fake implements _i2.GeoCoord {}

class _FakeCoordIJ_2 extends _i1.Fake implements _i2.CoordIJ {}

/// A class which mocks [H3].
///
/// See the documentation for Mockito's code generation for more information.
class MockH3 extends _i1.Mock implements _i2.H3 {
  MockH3() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool h3IsValid(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsValid, [h3Index]),
          returnValue: false) as bool);
  @override
  bool h3IsPentagon(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsPentagon, [h3Index]),
          returnValue: false) as bool);
  @override
  bool h3IsResClassIII(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsResClassIII, [h3Index]),
          returnValue: false) as bool);
  @override
  int h3GetBaseCell(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetBaseCell, [h3Index]),
          returnValue: 0) as int);
  @override
  List<int> h3GetFaces(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetFaces, [h3Index]),
          returnValue: <int>[]) as List<int>);
  @override
  int h3GetResolution(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetResolution, [h3Index]),
          returnValue: 0) as int);
  @override
  BigInt geoToH3(_i2.GeoCoord? geoCoord, int? res) =>
      (super.noSuchMethod(Invocation.method(#geoToH3, [geoCoord, res]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  _i2.GeoCoord h3ToGeo(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3ToGeo, [h3Index]),
          returnValue: _FakeGeoCoord_1()) as _i2.GeoCoord);
  @override
  List<_i2.GeoCoord> h3ToGeoBoundary(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3ToGeoBoundary, [h3Index]),
          returnValue: <_i2.GeoCoord>[]) as List<_i2.GeoCoord>);
  @override
  BigInt h3ToParent(BigInt? h3Index, int? resolution) =>
      (super.noSuchMethod(Invocation.method(#h3ToParent, [h3Index, resolution]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  List<BigInt> h3ToChildren(BigInt? h3Index, int? resolution) => (super
      .noSuchMethod(Invocation.method(#h3ToChildren, [h3Index, resolution]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  BigInt h3ToCenterChild(BigInt? h3Index, int? resolution) => (super
      .noSuchMethod(Invocation.method(#h3ToCenterChild, [h3Index, resolution]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  List<BigInt> kRing(BigInt? h3Index, int? ringSize) =>
      (super.noSuchMethod(Invocation.method(#kRing, [h3Index, ringSize]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> hexRing(BigInt? h3Index, int? ringSize) =>
      (super.noSuchMethod(Invocation.method(#hexRing, [h3Index, ringSize]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> polyfill(
          {List<_i2.GeoCoord>? coordinates,
          int? resolution,
          List<List<_i2.GeoCoord>>? holes}) =>
      (super.noSuchMethod(
          Invocation.method(#polyfill, [], {
            #coordinates: coordinates,
            #resolution: resolution,
            #holes: holes
          }),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> compact(List<BigInt>? hexagons) =>
      (super.noSuchMethod(Invocation.method(#compact, [hexagons]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> uncompact(List<BigInt>? compactedHexagons, {int? resolution}) =>
      (super.noSuchMethod(
          Invocation.method(
              #uncompact, [compactedHexagons], {#resolution: resolution}),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  bool h3IndexesAreNeighbors(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#h3IndexesAreNeighbors, [origin, destination]),
          returnValue: false) as bool);
  @override
  BigInt getH3UnidirectionalEdge(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdge, [origin, destination]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  BigInt getOriginH3IndexFromUnidirectionalEdge(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(
              #getOriginH3IndexFromUnidirectionalEdge, [edgeIndex]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  BigInt getDestinationH3IndexFromUnidirectionalEdge(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(
              #getDestinationH3IndexFromUnidirectionalEdge, [edgeIndex]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  bool h3UnidirectionalEdgeIsValid(BigInt? edgeIndex) => (super.noSuchMethod(
      Invocation.method(#h3UnidirectionalEdgeIsValid, [edgeIndex]),
      returnValue: false) as bool);
  @override
  List<BigInt> getH3IndexesFromUnidirectionalEdge(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3IndexesFromUnidirectionalEdge, [edgeIndex]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> getH3UnidirectionalEdgesFromHexagon(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdgesFromHexagon, [edgeIndex]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<_i2.GeoCoord> getH3UnidirectionalEdgeBoundary(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdgeBoundary, [edgeIndex]),
          returnValue: <_i2.GeoCoord>[]) as List<_i2.GeoCoord>);
  @override
  int h3Distance(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(Invocation.method(#h3Distance, [origin, destination]),
          returnValue: 0) as int);
  @override
  List<BigInt> h3Line(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(Invocation.method(#h3Line, [origin, destination]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  _i2.CoordIJ experimentalH3ToLocalIj(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#experimentalH3ToLocalIj, [origin, destination]),
          returnValue: _FakeCoordIJ_2()) as _i2.CoordIJ);
  @override
  BigInt experimentalLocalIjToH3(BigInt? origin, _i2.CoordIJ? coordinates) =>
      (super.noSuchMethod(
          Invocation.method(#experimentalLocalIjToH3, [origin, coordinates]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  double pointDist(_i2.GeoCoord? a, _i2.GeoCoord? b, _i2.H3Units? unit) =>
      (super.noSuchMethod(Invocation.method(#pointDist, [a, b, unit]),
          returnValue: 0.0) as double);
  @override
  double cellArea(BigInt? h3Index, _i2.H3Units? unit) =>
      (super.noSuchMethod(Invocation.method(#cellArea, [h3Index, unit]),
          returnValue: 0.0) as double);
  @override
  double exactEdgeLength(BigInt? edgeIndex, _i2.H3Units? unit) => (super
      .noSuchMethod(Invocation.method(#exactEdgeLength, [edgeIndex, unit]),
          returnValue: 0.0) as double);
  @override
  double hexArea(int? res, _i2.H3AreaUnits? unit) =>
      (super.noSuchMethod(Invocation.method(#hexArea, [res, unit]),
          returnValue: 0.0) as double);
  @override
  double edgeLength(int? res, _i2.H3EdgeLengthUnits? unit) =>
      (super.noSuchMethod(Invocation.method(#edgeLength, [res, unit]),
          returnValue: 0.0) as double);
  @override
  int numHexagons(int? res) => (super
          .noSuchMethod(Invocation.method(#numHexagons, [res]), returnValue: 0)
      as int);
  @override
  List<BigInt> getRes0Indexes() =>
      (super.noSuchMethod(Invocation.method(#getRes0Indexes, []),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> getPentagonIndexes(int? res) =>
      (super.noSuchMethod(Invocation.method(#getPentagonIndexes, [res]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  double radsToDegs(double? val) => (super
          .noSuchMethod(Invocation.method(#radsToDegs, [val]), returnValue: 0.0)
      as double);
  @override
  double degsToRads(double? val) => (super
          .noSuchMethod(Invocation.method(#degsToRads, [val]), returnValue: 0.0)
      as double);
}
